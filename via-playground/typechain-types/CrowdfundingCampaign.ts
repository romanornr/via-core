/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
    AddressLike,
    ContractRunner,
    ContractMethod,
    Listener
} from 'ethers';
import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedLogDescription,
    TypedListener,
    TypedContractMethod
} from './common';

export interface CrowdfundingCampaignInterface extends Interface {
    getFunction(
        nameOrSignature: 'contribute' | 'getFundingGoal' | 'getTotalFundsRaised' | 'owner' | 'withdrawFunds'
    ): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: 'ContributionReceived' | 'GoalReached'): EventFragment;

    encodeFunctionData(functionFragment: 'contribute', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getFundingGoal', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getTotalFundsRaised', values?: undefined): string;
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
    encodeFunctionData(functionFragment: 'withdrawFunds', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'contribute', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getFundingGoal', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getTotalFundsRaised', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'withdrawFunds', data: BytesLike): Result;
}

export namespace ContributionReceivedEvent {
    export type InputTuple = [contributor: AddressLike, amount: BigNumberish];
    export type OutputTuple = [contributor: string, amount: bigint];
    export interface OutputObject {
        contributor: string;
        amount: bigint;
    }
    export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export namespace GoalReachedEvent {
    export type InputTuple = [totalFundsRaised: BigNumberish];
    export type OutputTuple = [totalFundsRaised: bigint];
    export interface OutputObject {
        totalFundsRaised: bigint;
    }
    export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export interface CrowdfundingCampaign extends BaseContract {
    connect(runner?: ContractRunner | null): CrowdfundingCampaign;
    waitForDeployment(): Promise<this>;

    interface: CrowdfundingCampaignInterface;

    queryFilter<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;

    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>
    ): Promise<this>;

    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>
    ): Promise<this>;

    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

    contribute: TypedContractMethod<[], [void], 'payable'>;

    getFundingGoal: TypedContractMethod<[], [bigint], 'view'>;

    getTotalFundsRaised: TypedContractMethod<[], [bigint], 'view'>;

    owner: TypedContractMethod<[], [string], 'view'>;

    withdrawFunds: TypedContractMethod<[], [void], 'nonpayable'>;

    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'contribute'): TypedContractMethod<[], [void], 'payable'>;
    getFunction(nameOrSignature: 'getFundingGoal'): TypedContractMethod<[], [bigint], 'view'>;
    getFunction(nameOrSignature: 'getTotalFundsRaised'): TypedContractMethod<[], [bigint], 'view'>;
    getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
    getFunction(nameOrSignature: 'withdrawFunds'): TypedContractMethod<[], [void], 'nonpayable'>;

    getEvent(
        key: 'ContributionReceived'
    ): TypedContractEvent<
        ContributionReceivedEvent.InputTuple,
        ContributionReceivedEvent.OutputTuple,
        ContributionReceivedEvent.OutputObject
    >;
    getEvent(
        key: 'GoalReached'
    ): TypedContractEvent<GoalReachedEvent.InputTuple, GoalReachedEvent.OutputTuple, GoalReachedEvent.OutputObject>;

    filters: {
        'ContributionReceived(address,uint256)': TypedContractEvent<
            ContributionReceivedEvent.InputTuple,
            ContributionReceivedEvent.OutputTuple,
            ContributionReceivedEvent.OutputObject
        >;
        ContributionReceived: TypedContractEvent<
            ContributionReceivedEvent.InputTuple,
            ContributionReceivedEvent.OutputTuple,
            ContributionReceivedEvent.OutputObject
        >;

        'GoalReached(uint256)': TypedContractEvent<
            GoalReachedEvent.InputTuple,
            GoalReachedEvent.OutputTuple,
            GoalReachedEvent.OutputObject
        >;
        GoalReached: TypedContractEvent<
            GoalReachedEvent.InputTuple,
            GoalReachedEvent.OutputTuple,
            GoalReachedEvent.OutputObject
        >;
    };
}
